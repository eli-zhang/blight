### Starting build.
# Target: app.ml.depends, tags: { package(ANSITerminal), package(oUnit), extension:ml, file:app.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package oUnit -modules app.ml > app.ml.depends # cached
# Target: controller.ml.depends, tags: { package(ANSITerminal), package(oUnit), extension:ml, file:controller.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package oUnit -modules controller.ml > controller.ml.depends # cached
# Target: controller.cmo, tags: { package(ANSITerminal), package(oUnit), byte, compile, extension:cmo, extension:ml, file:controller.cmo, file:controller.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package oUnit -o controller.cmo controller.ml # cached
# Target: infection.ml.depends, tags: { package(ANSITerminal), package(oUnit), extension:ml, file:infection.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package oUnit -modules infection.ml > infection.ml.depends # cached
# Target: objects.ml.depends, tags: { package(ANSITerminal), package(oUnit), extension:ml, file:objects.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package oUnit -modules objects.ml > objects.ml.depends # cached
# Target: objects.cmo, tags: { package(ANSITerminal), package(oUnit), byte, compile, extension:cmo, extension:ml, file:objects.cmo, file:objects.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package oUnit -o objects.cmo objects.ml # cached
# Target: infection.cmo, tags: { package(ANSITerminal), package(oUnit), byte, compile, extension:cmo, extension:ml, file:infection.cmo, file:infection.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package oUnit -o infection.cmo infection.ml # cached
# Target: state.ml.depends, tags: { package(ANSITerminal), package(oUnit), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package oUnit -modules state.ml > state.ml.depends # cached
# Target: state.cmo, tags: { package(ANSITerminal), package(oUnit), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package oUnit -o state.cmo state.ml # cached
# Target: terminalPrint.ml.depends, tags: { package(ANSITerminal), package(oUnit), extension:ml, file:terminalPrint.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -package oUnit -modules terminalPrint.ml > terminalPrint.ml.depends # cached
# Target: terminalPrint.cmo, tags: { package(ANSITerminal), package(oUnit), byte, compile, extension:cmo, extension:ml, file:terminalPrint.cmo, file:terminalPrint.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package oUnit -o terminalPrint.cmo terminalPrint.ml # cached
# Target: app.cmo, tags: { package(ANSITerminal), package(oUnit), byte, compile, extension:cmo, extension:ml, file:app.cmo, file:app.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -package oUnit -o app.cmo app.ml # cached
# Target: app.byte, tags: { package(ANSITerminal), package(oUnit), byte, dont_link_with, extension:byte, file:app.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package ANSITerminal -package oUnit controller.cmo objects.cmo infection.cmo state.cmo terminalPrint.cmo app.cmo -o app.byte # cached
# Compilation successful.
